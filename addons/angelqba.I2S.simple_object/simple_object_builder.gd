extends "res://addons/angelqba.image_to_scene/builders/builder_interface.gd"

func _init().():
	builder_name = 'SimpleObjectBuilder'
	builder_type = 'object'
	
	# configuration of fields necessary for the generation
	configuration_fields.append({
		'name': "object-SimpleObjectBuilder",
		'title': "Object",
		'type': 'file'
	})
	configuration_fields.append({
		'name': "probability-SimpleObjectBuilder",
		'title': "Probability",
		'type': 'int'
	})
	configuration_fields.append({
		'name': "scale-SimpleObjectBuilder",
		'title': "Scale",
		'type': 'float'
	})

# generate the multimeshinstances
func build(data, selected_node):
	
	var result = []
	
	# get configuration values
	var object = null
	if 'object-SimpleObjectBuilder' in selected_node.image_data_resource.configuration_values:
		object = load(selected_node.image_data_resource.configuration_values['object-SimpleObjectBuilder'])
		
	if not object:
		return MeshInstance.new()
	
	var probability = 50
	if 'probability-SimpleObjectBuilder' in selected_node.image_data_resource.configuration_values:
		probability = selected_node.image_data_resource.configuration_values['probability-SimpleObjectBuilder']
	
	var scale = 1
	if 'scale-SimpleObjectBuilder' in selected_node.image_data_resource.configuration_values:
		scale = selected_node.image_data_resource.configuration_values['scale-SimpleObjectBuilder']
	
	var layers_with_data = []
	for i in data['point_groups']:
		if i['type'] != 'empty':
			layers_with_data.append(i)
		
	# for each zone generated by the processor, creates a multimeshinstance
	for layer_data in layers_with_data:
		var multimesh = MultiMesh.new()
		var instance = object.instance()
		var mesh = instance
		# search for a mesh instance in the referenced scene
		if not mesh is MeshInstance:
			for i in instance.get_children():
				if i is MeshInstance:
					mesh = i.mesh
					instance = i
					break
					
		multimesh.mesh = mesh
		# will contain the elements to add to the multimesh
		var to_add = []
		for element in layer_data['elements']:
			var randval = randf()
			# add it using the probability configured
			if randval <= probability / 100.0 * element['probability']:
				to_add.append(element)

		# Set the format first.
		multimesh.transform_format = MultiMesh.TRANSFORM_3D
		multimesh.color_format = MultiMesh.COLOR_NONE
		multimesh.custom_data_format = MultiMesh.CUSTOM_DATA_NONE
		# Then resize (otherwise, changing the format is not allowed).
		multimesh.instance_count = len(to_add)
		# Maybe not all of them should be visible at first.
		multimesh.visible_instance_count = len(to_add)
		# Set the transform of the instances.
		var index = 0
		for i in to_add:
			multimesh.set_instance_transform(index, Transform(
				Vector3(scale,0,0), Vector3(0,scale,0), Vector3(0,0,scale), 
				i['vector']
			))
			index += 1
		
		var multimeshinstance = MultiMeshInstance.new()
		multimeshinstance.multimesh = multimesh
		multimeshinstance.material_override = instance.get_surface_material(0)

		result.append(multimeshinstance)
	
	return result
